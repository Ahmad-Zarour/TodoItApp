using System;
using System.Collections.Generic;
using TodoIt.Model;
using System.Linq;


namespace TodoIt.Data
{
    public class TodoItems
    {
        private static Todo[] todoArray = new Todo[0];

        // Size method get the size of todoArray and return 0 if its empty
        public int Size()
        {
            if (todoArray.Length == 0)
            {
                Console.WriteLine("No todo tasks has been Added yet!!");
                return 0;
            }
            else
                return todoArray.Length;
        }

        // FindAll method, case of empty returns null or return an array of todo object
        public Todo[] FindAll()
        {
            if (todoArray.Length == 0)
            {
                Console.WriteLine("No todo tasks has been Added yet!!");
                return null;
            }
            else
                return todoArray;
        }

        // FindById method , if todo Id was found so method returns the relevant data else return null as not found
        public Todo FindById(int todoHasId)
        {
 
                for (int i = 0; i < todoArray.Length; i++)
                {
                    if (todoArray[i].TodoId == todoHasId)
                        return todoArray[i];
                }
            Console.WriteLine($"Todo taks with ID {todoHasId} not exsist");
            return null;
        }

        // Add a new todo to the todoArray and return an object todo , todoId will be generated by TodoSequencer.nextTodoId()
        public Todo AddNewTodo(string description)
        {
            Array.Resize<Todo>(ref todoArray, todoArray.Length +1 ); // expand the size of todoArray by 1
            return todoArray[todoArray.Length-1] = new Todo(TodoSequencer.nextTodoId(), description);
 
        }

        // Clear all the content of todoArray and reset the size to zero
        public void Clear()
        {
            Array.Clear(todoArray, 0, todoArray.Length);
            Array.Resize<Todo>(ref todoArray, 0);
            Console.WriteLine("All Data has been cleared");
        }

        //10//

        // Method FindByDoneStatus to get all todo items that has a matching done status. 
        public Todo[] FindByDoneStatus(bool doneStatus)
        {
            Todo[] allDoneStatusArray = new Todo[1];
            for (int i = 0; i < todoArray.Length; i++)
            {
                if(todoArray[i].Done == doneStatus)
                {
                    Array.Resize<Todo>(ref allDoneStatusArray, allDoneStatusArray.Length+1);
                    allDoneStatusArray[i] = todoArray[i];
                }
            }
            return allDoneStatusArray;
        }
        // Method FindByAssignee to find all objects that has an assignee with a personId matching.
        public Todo[] FindByAssignee(int personId)
        {
             Todo[] allAssigneeMatchIdArray = new Todo[0];

            for (int i = 0; i < todoArray.Length; i++)
            {
                if (todoArray[i].Assignee == null)
                    continue;
                if (todoArray[i].Assignee.PersonId == personId)
                {
                    Console.WriteLine("Hellllooo");
                    Array.Resize<Todo>(ref allAssigneeMatchIdArray, allAssigneeMatchIdArray.Length + 1);
                    
                    allAssigneeMatchIdArray[i] = todoArray[i];
                }
            }
            return allAssigneeMatchIdArray;
        }
        //Method FindByAssignee to find all objects that has an assignee with objects that has sent in Person.
        public Todo[] FindByAssignee(Person assignee)
        {

            Todo[] allAssigneeOfPerson = new Todo[0];
            for (int i = 0; i < todoArray.Length; i++)
            {
                if (todoArray[i].Assignee == null)
                    continue;
                if (todoArray[i].Assignee == assignee)
                {
                    Array.Resize<Todo>(ref allAssigneeOfPerson, allAssigneeOfPerson.Length + 1);
                    allAssigneeOfPerson[i] = todoArray[i];
                }
            }
            return allAssigneeOfPerson;
        }

        // Method FindUnassignedTodoItems to return an array of objects that does not have an assignee set.
        public Todo[] FindUnassignedTodoItems()
        {
            Todo[] unAssignedTodoItems = new Todo[0];
            for (int i = 0; i < todoArray.Length; i++)
            {

                if (todoArray[i].Assignee == null)
                {
                    Array.Resize<Todo>(ref unAssignedTodoItems, unAssignedTodoItems.Length + 1);
                    unAssignedTodoItems[i] = todoArray[i];
                }
            }
            return unAssignedTodoItems;
        }

        public bool RemoveTodo(Todo todoItem)
        {
            var indexOf = Array.FindIndex(todoArray, w => w.TodoId.Equals(todoItem.TodoId));
            if ( todoArray == null || indexOf < 0)
                return false;

            
            todoArray = todoArray.Where((w, location) => !location.Equals(indexOf)).ToArray();
            return true;
        }
    }
}
